#%Module1.0

set compilernames [regexp -all -inline {\S+} [regsub -all {/\S*} "ROLLCOMPILER" ""]]

module-whatis "intelmpi mpi stack"
module-whatis "Version: VERSION"
module-whatis "Compiler: $compilernames"

if {[module-info mode switch1] || [module-info mode switch3]} {
  # Get the command line that invoked this process; unload only if switching
  # from gnu to another (compiler) module, e.g., "module switch gnu intel"
  set commandWords [split [exec /bin/ps -p [pid] -o args=] " "]
  set switchFrom [lindex [split [module-info name] "/"] 0]
  set switchTo [lindex [split [lindex $commandWords end] "/"] 0]
  set unloadApps [expr ! [string equal $switchTo $switchFrom]]
} elseif {[module-info mode remove]} {
  set unloadApps 1
} else {
  set unloadApps 0
}


array set compilerSets {
  gnu   gcc:g++:gfortran:gfortran
  intel icc:icpc:ifort:ifort
  pgi pgcc:pgc++:pgf77:pgf90
}

# Figure out the applicable compiler--either the one whose module was loaded
# when this modulefile was loaded or the one with the most-recently-loaded
# module.  Report an error if neither applies.

# Figure out the applicable compiler--either the one whose module was loaded
# when this modulefile was loaded or the one with the most-recently-loaded
# module.  Report an error if neither applies.

if { [ info exists env(I_MPI_CC) ] } {
    foreach {compiler} [list intel gnu pgi] {
     if { [ string match *$env(I_MPI_CC)* $compilerSets($compiler) ] } {
         break
     }
   }
} elseif [info exists env(LOADEDMODULES)] {
  foreach {module} [split $::env(LOADEDMODULES) :] {
    set module [lindex [split $module /] 0]
    if {[regexp [format {%s(/|\s|$)} $module] $compilernames]} {
      set compiler $module
    }
  }
}

 

if { ! [info exists compiler] } {
  puts stderr "Need to load a compiler module first"
  exit 1
}


set compilers [split $compilerSets($compiler) :]

set mpiHome /opt/intel/VERSION/compilers_and_libraries_VERSION/linux/mpi/intel64

setenv MPIHOME $mpiHome
setenv I_MPI_CC  [lindex $compilers 0]
setenv I_MPI_CXX [lindex $compilers 1]
setenv I_MPI_F77 [lindex $compilers 2]
setenv I_MPI_F90 [lindex $compilers 3]
setenv I_MPI_FC  [lindex $compilers 3]

prepend-path PATH $mpiHome/bin
prepend-path LD_LIBRARY_PATH $mpiHome/lib

set moduleProcess [pid]
set modulesBin $env(HOME)/.modules/$moduleProcess/bin
if { [ string equal $compiler pgi ] } {
    if { ! $unloadApps } {
      file mkdir $modulesBin
      exec ln -s $mpiHome/bin/mpipgcc $modulesBin/mpicc
      exec ln -s $mpiHome/bin/mpipgcxx $modulesBin/mpicxx
      exec ln -s $mpiHome/bin/mpipgf77 $modulesBin/mpif77
      exec ln -s $mpiHome/bin/mpipgf90 $modulesBin/mpif90
    } else {
      file delete -force $env(HOME)/.modules/$env(MODULEPID)
    }
    setenv MODULEPID $moduleProcess
    prepend-path PATH $modulesBin
} elseif { [ string equal $compiler gnu ] } {
     if { ! $unloadApps } {
       file mkdir $modulesBin
       exec ln -s $mpiHome/bin/mpigf90 $modulesBin/mpif90
     } else {
       file delete -force $env(HOME)/.modules/$env(MODULEPID)
     }
     setenv MODULEPID $moduleProcess
     prepend-path PATH $modulesBin
}
